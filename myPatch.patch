diff --git a/src/App.js b/src/App.js
index 659020e..8bc38ac 100644
--- a/src/App.js
+++ b/src/App.js
@@ -3,12 +3,14 @@ import './App.css';
 import { LoadingSpinner } from './components/LoadingSpinner/LoadingSpinner';
 import { Nav } from './components/Nav/Nav';
 import { ProductsSection } from './components/ProductsSection/ProductsSection';
+import RangeSlider from './components/RangeSlider/RangeSlider';
 
 function App() {
   return (
       <div className="App">
         <Nav/>
         <LoadingSpinner/>
+        <RangeSlider />
         <ProductsSection/>
       </div>
   );
diff --git a/src/Routing.js b/src/Routing.js
index d7b17ec..d50f975 100644
--- a/src/Routing.js
+++ b/src/Routing.js
@@ -16,6 +16,10 @@ export const Routing = () => {
   const [itemsInCart, setItemsInCart] = useState({});
   const [loading, setLoading] = useState(false);
   const [products, setProducts] = useState([]);
+  const [highestPrice, setHighestPrice] = useState(1);
+  const [value, setValue] = useState([1, highestPrice]);
+  const [lowestPriceInRange, setLowestPriceInRange] = useState(1);
+  const [highestPriceInRange, setHighestPriceInRange] = useState(highestPrice);
 
   const sortOptions = ["Alphabetically, A-Z", "Alphabetically, Z-A", "Price, low to high", "Price, high to low", "Rating"];
 
@@ -35,13 +39,22 @@ export const Routing = () => {
   useEffect(() => {
     const categories = products.map(p => p.category).filter((value, index, array) => array.indexOf(value)===index);
     setCategories(categories);
-    console.log("categories: ", categories);
+    const newHighestPrice = Math.max(parseFloat(products.map(p => p.price)));
+    setHighestPrice(newHighestPrice);
+    setHighestPriceInRange(newHighestPrice);
+    console.log("highest price: ", newHighestPrice);
   }, [products]);
 
+  useEffect(() => {
+    setValue([1, highestPrice])
+  }, [highestPrice])
+
   useEffect(() => {
     const loadingSpinner = document.querySelector(".loader-container");
+    const rangeSlider = document.querySelector(".rangeSlider")
     if (loadingSpinner) {
       loading ? loadingSpinner.style.display = "flex" : loadingSpinner.style.display = "none";
+      // loading ? rangeSlider.style.display = "flex" : rangeSlider.style.display = "none";
     };
   }, [loading])
 
@@ -91,7 +104,7 @@ export const Routing = () => {
 
   return (
     <BrowserRouter>
-      <MyContext.Provider value={{itemsInCart, setFilterByValue, setSortByValue, categories, incrementProduct, decrementProduct, addToCart, products, filterByValue, sortByValue, setItemsInCart, sortOptions}}>
+      <MyContext.Provider value={{itemsInCart, setFilterByValue, setSortByValue, categories, incrementProduct, decrementProduct, addToCart, products, filterByValue, sortByValue, setItemsInCart, sortOptions, highestPrice, value, setValue, lowestPriceInRange, setLowestPriceInRange, highestPriceInRange, setHighestPriceInRange}}>
         <NavUnlisted>
           <NavLink to="/" activeClassName="current" exact><li>HomePage</li></NavLink>
           <NavLink to="about" activeClassName="current" exact><li>About</li></NavLink>
diff --git a/src/components/ProductsSection/ProductsSection.js b/src/components/ProductsSection/ProductsSection.js
index 9d4bae6..dd372e2 100644
--- a/src/components/ProductsSection/ProductsSection.js
+++ b/src/components/ProductsSection/ProductsSection.js
@@ -5,8 +5,7 @@ import { Product } from "../Product/Product";
 import './ProductsSection.css';
 
 export const ProductsSection = () => {
-  const {products, filterByValue, sortByValue} = useContext(MyContext);
-
+  const {products, filterByValue, sortByValue, lowestPriceInRange, highestPriceInRange} = useContext(MyContext);
   const sortByValueFunc = (value) => {
     switch(value) {
       case "Alphabetically, A-Z":
@@ -24,10 +23,13 @@ export const ProductsSection = () => {
     }
   }
 
+  console.log("current highest price in range", highestPriceInRange)
+
   return (
     <section className="products">
       {products
       .filter(filterByValue.toLowerCase() === "all products" ? p => true : p => p.category === filterByValue)
+      .filter(p => p.price >= lowestPriceInRange && p.price <= highestPriceInRange)
       .sort(sortByValueFunc(sortByValue))
       .map((p) => <Product key={p.id} src={p.image} title={p.title} price={p.price} id ={p.id}/>)}
     </section>
diff --git a/src/index.js b/src/index.js
index 656c94c..806fac0 100644
--- a/src/index.js
+++ b/src/index.js
@@ -1,3 +1,7 @@
+import '@fontsource/roboto/300.css';
+import '@fontsource/roboto/400.css';
+import '@fontsource/roboto/500.css';
+import '@fontsource/roboto/700.css';
 import React from 'react';
 import ReactDOM from 'react-dom/client';
 import Routing from './Routing';
